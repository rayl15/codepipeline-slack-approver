AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: Serverless application to support Slack approval from requests generated by AWS CodePipeline
Parameters:
  AppName:
    Type: String
    Description: Name of the application.

  SlackChannel: 
    Type: String
    Description: Enter exact name of Slack Channel

  SlackWebHookUrl:
    Type: String
    Description: Enter exact name of Slack WebHook URL

  SlackVerficationToken:
    Type: String
    Description: Enter Slack Verfication Token
    NoEcho: true

  KmsKeyArnForLambda:
    Type: String
    Description: KMS Key ARN to Encrypt Environment Variables

  SNSTopicArnFromCodePipeline:
    Type: String
    Description: SNS Topic ARN for triggering Slack approval requests (Optional)

Conditions:
  CreateSNSTopic: !Equals
    - !Ref SNSTopicArnFromCodePipeline
    - ''

Resources:
  PipelineApprovaltoSlackFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: "../function/"
      KmsKeyArn: !Ref KmsKeyArnForLambda #Default arn:aws:kms:ap-southeast-2:297011389999:key/9c4e465b-3078-464f-b477-4eeb0b055fe0
      Handler: inbound.lambda_handler
      Runtime: python3.6
      Role: !GetAtt RolePipelineApprovaltoSlackFunction.Arn
      Events:
        SNS:
          Type: SNS
          Properties:
            Topic: 
              !If 
              - CreateSNSTopic
              - !Ref SNSTopic
              - !Ref SNSTopicArnFromCodePipeline
      Environment:
        Variables:
          SLACK_CHANNEL: !Ref SlackChannel #SLACK_CHANNEL: Adam Cousins
          SLACK_WEBHOOK_URL: !Ref SlackWebHookUrl #SLACK_WEBHOOK_URL: https://hooks.slack.com/services/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

  RolePipelineApprovaltoSlackFunction:
    Type: AWS::IAM::Role
    Properties:      
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
        Version: '2012-10-17'
      Path: "/"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Resource: "*"
              Effect: Allow
              Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents

  SlacktoPipelineApprovalFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: "../function/"
      KmsKeyArn: !Ref KmsKeyArnForLambda #Default arn:aws:kms:ap-southeast-2:297011389999:key/9c4e465b-3078-464f-b477-4eeb0b055fe0
      Handler: outbound.lambda_handler
      Runtime: python3.6
      Role: !GetAtt RoleSlacktoPipelineApprovalFunction.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: /outbound
            Method: post
      Environment:
        Variables:
          SLACK_VERIFICATION_TOKEN: !Ref SlackVerficationToken #SLACK_VERIFICATION_TOKEN: ai3vZul7nb0kTZCToz6NdCUl

  RoleSlacktoPipelineApprovalFunction:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodePipelineApproverAccess
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
        Version: '2012-10-17'
      Path: "/"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Resource: "*"
              Effect: Allow
              Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents

  SNSTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Id: SNSTopicPublishPolicy
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com
          Action: sns:Subscribe
          Resource:
            !If
            - CreateSNSTopic
            - !Ref SNSTopic
            - !Ref SNSTopicArnFromCodePipeline
      Topics:
      - !If
        - CreateSNSTopic
        - !Ref SNSTopic
        - !Ref SNSTopicArnFromCodePipeline

  SNSTopic:
    Condition: CreateSNSTopic 
    Type: "AWS::SNS::Topic"

  SNStoLambdaExecutionPermissions:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt PipelineApprovaltoSlackFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: sns.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: 
        !If
        - CreateSNSTopic
        - !Ref SNSTopic
        - !Ref SNSTopicArnFromCodePipeline
      
Outputs:
  SNSTopic:
    Condition: CreateSNSTopic
    Description: SNS Topic To Send AWS CodePipeline Approval Request To
    Value: !GetAtt SNSTopic.TopicName
    Export: 
      Name: !Sub ${AWS::StackName}-SlackSNSTopicName

  SNSTopicArn:
    Description: SNS Topic Arn To Send AWS CodePipeline Approval Request To
    Value: 
      !If 
      - CreateSNSTopic
      - !Ref SNSTopic
      - !Ref SNSTopicArnFromCodePipeline
    Export: 
      Name:
        !Sub ${AWS::StackName}-${AppName}-SlackSNSTopicArn
